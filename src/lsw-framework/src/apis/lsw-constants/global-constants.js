LswConstants.global.define("rutiner.md", `

Aprovecha para poner algo guapo aqu칤.

Y se te ir치 recordando.

`.trim());

LswConstants.global.define("randomizables.env", `

n칰meros = 1
conceptos = 1
ideas = 1
interfaces gr치ficas = 1
patrones = 1
arquitectura de la realidad = 1
arquitectura del yo = 1
lenguajes formales = 1
cocina = 1
nutrici칩n = 1
qu칤mica = 1
nutrici칩n = 1
qu칤mica = 1
f칤sica = 1
matem치ticas = 1
geometr칤a = 1
canvas = 1
perspectiva = 1
medicina = 1
biolog칤a = 1
fisiolog칤a = 1
musculaci칩n = 1
flexibilidad = 1
emociones = 1
actividad f칤sica = 1
optimizaci칩n de ram = 1
autocontrol = 1
autobservaci칩n = 1
autoan치lisis = 1
meditaci칩n = 1
relajaci칩n = 1
paisajismo = 1
dibujo 3d = 1
perspectiva = 1
geometr칤a = 1
mates = 1
dibujo art칤stico = 1
anime = 1
abstracto = 1
esquemista = 1
conceptualista = 1
reflexi칩n = 1
di치logo interno = 1

`.trim());

LswConstants.global.define("backgrounds.env", `

assets/images/montania1.png
assets/images/playa1.png
assets/images/playa2.png

`.trim());

LswConstants.global.define("automessages.env", `

S칠 tu propia luz.
Lo conseguiremos.
Todo se andar치.
Sigamos adelante.
En alg칰n momento encontraremos la luz.

`.trim());

LswConstants.global.define("Boot.tri", `

@{
  "categorias": [],
  "asco": [],
  "de": [],
  "persona": [],
  "universal": "ok"
}
Boot [Art칤culo para el boot] {
  @{
    "autor": "github.com/allnulled",
    "mensaje": "Dios, m칠tete tu puto universo por tu puto culo de rata malnacida, no?",
    "a침o": 2025
  }
  Capitulo 1 {}
  Otro m치s nuevo [Otro m치s nuevo] {
    Parte 1 [Capitulo 2/Parte 1] {}
    Parte 2 [Capitulo 2/Parte 2] {}
    Parte 3 [Capitulo 2/Parte 3] {}
    Parte 4 [Capitulo 2/Parte 4] {}
    Parte 5 [Capitulo 2/Parte 5] {}
  }
  Cap칤tulo 3 [] {
    Parte 1 [Capitulo 2/Parte 1] {}
    Parte 2 [Capitulo 2/Parte 2] {}
    Parte 3 [Capitulo 2/Parte 3] {}
    Parte 4 [Capitulo 2/Parte 4] {}
    Parte 5 [Capitulo 2/Parte 5] {}
  }
  Cap칤tulo 4 [] {
    Parte 1 [Capitulo 2/Parte 1] {}
    Parte 2 [Capitulo 2/Parte 2] {}
    Parte 3 [Capitulo 2/Parte 3] {}
    Parte 4 [Capitulo 2/Parte 4] {}
    Parte 5 [Capitulo 2/Parte 5] {}
  }
  Cap칤tulo 5 [] {
    Parte 1 [Capitulo 2/Parte 1] {}
    Parte 2 [Capitulo 2/Parte 2] {}
    Parte 3 [Capitulo 2/Parte 3] {}
    Parte 4 [Capitulo 2/Parte 4] {}
    Parte 5 [Capitulo 2/Parte 5] {}
  }
  Cap칤tulo 6 [] {
    Parte 1 [Capitulo 2/Parte 1] {}
    Parte 2 [Capitulo 2/Parte 2] {}
    Parte 3 [Capitulo 2/Parte 3] {}
    Parte 4 [Capitulo 2/Parte 4] {}
    Parte 5 [Capitulo 2/Parte 5] {}
  }
}
  
`.trim());


LswConstants.global.define("categorias.tri", `

츼rbol de categor칤as [] {
  Biolog칤a [] {
    Vegetal [] {}
    Animal [] {}
    Social [] {}
  }
  Medicina [] {
    Fisiolog칤a [] {}
    Nutrici칩n [] {}
  }
  Qu칤mica [] {}
  F칤sica [] {}
  Matem치ticas [] {
    Programaci칩n [] {}
    L칩gica abstracta [] {}
  }
  Arte [] {}
}

`.trim());


LswConstants.global.define("report/inicio.js", `

const conceptos = await lsw.database.selectMany("Concepto");
const acciones = await lsw.database.selectMany("Accion");
const acciones_virtuales = await lsw.database.selectMany("Accion_virtual");
const propagadores = await lsw.database.selectMany("Propagador_de_concepto");
const prototipos = await lsw.database.selectMany("Propagador_prototipo");
const acumulaciones_objeto = acciones_virtuales.reduce((out, it) => {
  if(!(it.en_concepto in out)) {
    out[it.en_concepto] = 0;
  }
  out[it.en_concepto] += (LswTimer.utils.fromDurationstringToMilliseconds(it.tiene_duracion) || 0);
  return out;
}, {});
const acumulaciones = Object.keys(acumulaciones_objeto).sort((k1, k2) => {
  const c1 = acumulaciones_objeto[k1];
  const c2 = acumulaciones_objeto[k2];
  return c2 > c1 ? 1 : -1;
}).map(id => {
  const ms = acumulaciones_objeto[id];
  return {
    nombre: id,
    total: LswTimer.utils.fromMillisecondsToDurationstring(ms)
  };
});

return {
  "Acumulaciones virtuales": acumulaciones,
  "Conceptos": conceptos,
  "Acciones": acciones,
  "Acciones virtuales": acciones_virtuales,
  "Propagadores": propagadores,
  "Propagadores prototipo": prototipos,
};

`.trim());

LswConstants.global.define("boot.proto", `

inc /kernel/agenda/proto/concepto
inc /kernel/agenda/proto/funcion
inc /kernel/agenda/proto/relacion

def desayunar, comer, cenar

fun unEjemplo: param1, param2 {
  console.log("Solo un ejemplo.");
}

rel desayunar
  > consumir * 1
  > abstenerse * 0
  >> unEjemplo: 500, 1000

`.trim());

LswConstants.global.define("boot.js", `

// Cuidadito con este script que te cargas la app
// y luego tienes que borrar la cach칠 para volver a tenerla.
        
`.trim());

LswConstants.global.define("multiplicador.js", `

fun multiplicador: contexto {
  const {
    accion,
    propagador_de_concepto
  } = contexto;
  return {
    tiene_duracion: LswTimer.utils.multiplyDuration(
      accion.tiene_duracion,
      propagador_de_concepto.tiene_parametros_extra
    )
  };
}
        
`.trim());

LswConstants.global.define("user.env", `

app.username=usuario
app.clock_message=游눑
        
`.trim());

LswConstants.global.define("/kernel/settings/goals/factory/fisico-3-veces.js", `

return LswGoals.ensureActionHasMinimumTimesToday("actividad f칤sica", 3, {
  id: "actividad f칤sica",
  urgencia: 0,
  completado: "Actividad f칤sica 3 veces al d칤a completada",
  fallido: "Hay que hacer 3 veces de actividad f칤sica al d칤a",
});

`.trim());

LswConstants.global.define("/kernel/settings/goals/factory/fisico-4h.js", `

  
return LswGoals.ensureActionHasMinimumDurationToday("actividad f칤sica", "4h", {
  id: "actividad f칤sica",
  urgencia: 0,
  completado: "Actividad f칤sica 4 horas m칤nimo veces al d칤a completada",
  fallido: "Hay que hacer 4 horas m칤nimo de actividad f칤sica al d칤a",
});

`.trim());

LswConstants.global.define("/kernel/settings/goals/list/focus.env", `

nombre=enf칩cate
urgencia=100
mensaje=ok
intervalo=2025-05-17 - 2025/12/30

`.trim());