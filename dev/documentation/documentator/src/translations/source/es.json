{
  "type": "type",
  "class": "class",
  "extends": "extends",
  "Object": "Object",
  "vendor": "vendor",
  "lsw": "lsw",
  "namespace": "namespace",
  "LswCircuiter": "LswCircuiter",
  "source code": "source code",
  "La clase está definida así:\n": "La clase está definida así:\n",
  "LswClassRegister": "LswClassRegister",
  "section": "section",
  "Lsw ClassRegister API » LswClassRegister class": "Lsw ClassRegister API » LswClassRegister class",
  "LswCommander": "LswCommander",
  "LswCompromiser": "LswCompromiser",
  "Lsw Compromiser API » LswCompromiser class": "Lsw Compromiser API » LswCompromiser class",
  "LswConfigurer": "LswConfigurer",
  "Lsw Configurer API » LswConfigurer class": "Lsw Configurer API » LswConfigurer class",
  "LswCycler": "LswCycler",
  "Lsw Cycler API » LswCycler class": "Lsw Cycler API » LswCycler class",
  "LswDatabase": "LswDatabase",
  "Lsw Database API » LswDatabase class": "Lsw Database API » LswDatabase class",
  "Lsw DatabaseVirtualizer API » LswDatabaseVirtualizer class": "Lsw DatabaseVirtualizer API » LswDatabaseVirtualizer class",
  "LswDepender": "LswDepender",
  "Lsw Depender API » LswDepender class": "Lsw Depender API » LswDepender class",
  "LswDom": "LswDom",
  "Lsw Dom API » LswDom class": "Lsw Dom API » LswDom class",
  "LswEnsurer": "LswEnsurer",
  "Lsw Ensurer API » LswEnsurer class": "Lsw Ensurer API » LswEnsurer class",
  "LswErrorManager": "LswErrorManager",
  "Lsw ErrorManager API » LswErrorManager class": "Lsw ErrorManager API » LswErrorManager class",
  "Lsw LswCycler API » LswCycler class": "Lsw LswCycler API » LswCycler class",
  "Class": "Class",
  "LswSchema": "LswSchema",
  "Lsw Schema API » LswSchema class": "Lsw Schema API » LswSchema class",
  "Lsw Utils API » Lsw Utils global": "Lsw Utils API » Lsw Utils global",
  "LswVue2": "LswVue2",
  "Lsw Vue2 API » LswVue2 class": "Lsw Vue2 API » LswVue2 class",
  "LswProxifier": "LswProxifier",
  "LswRandomizer": "LswRandomizer",
  "Superlogger": "Superlogger",
  "UFS Manager API » UFS_manager class": "UFS Manager API » UFS_manager class",
  "Lsw Circuiter API » LswCircuiter class\n": "Lsw Circuiter API » LswCircuiter class\n",
  "Lsw ClassRegister API » LswClassRegister class\n": "Lsw ClassRegister API » LswClassRegister class\n",
  "Lsw Commander API » LswCommander class\n": "Lsw Commander API » LswCommander class\n",
  "Lsw Dom API » LswEnsurer class": "Lsw Dom API » LswEnsurer class",
  "description": "description",
  "Este método se encarga de pasar los PROXIES a SCHEMA para el LswDatabase. No los registra: devuelve el schema resultante solamente.": "Este método se encarga de pasar los PROXIES a SCHEMA para el LswDatabase. No los registra: devuelve el schema resultante solamente.",
  "returns": "returns",
  "the general adaptation of SchemaEntity class to Schema Definition Object for LswDatabase.": "the general adaptation of SchemaEntity class to Schema Definition Object for LswDatabase.",
  "Este método se encarga de pasar los PROXIES a SCHEMA para el LswDatabase. Sí los registra en la instancia actual: no solo devuelve el schema.": "Este método se encarga de pasar los PROXIES a SCHEMA para el LswDatabase. Sí los registra en la instancia actual: no solo devuelve el schema.",
  "TODO": "Por hacer",
  "should redirect": "should redirect",
  "seleccionar e importar notes.": "seleccionar e importar notes.",
  "use $lsw.database.overwrite to send the field only": "use $lsw.database.overwrite to send the field only",
  "Array[\n  String:beforeToken,\n  String:afterToken\n]": "Array[\n  String:beforeToken,\n  String:afterToken\n]",
  "code.start": "code.start",
  "URLCommand object": "URLCommand object",
  "": "",
  "lsw\n": "lsw\n",
  "aclaration": "aclaration",
  "- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n\n```js\nThis is some code.\n\n```\n": "- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n\n```js\nThis is some code.\n\n```\n",
  "- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n": "- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n- The `LswCircuiter` class is available from the `globalThis` global scope variable.\n",
  "- The `LswCircuiter` class is available from the `globalThis` global scope variable.": "- The `LswCircuiter` class is available from the `globalThis` global scope variable.",
  "The `LswCircuiter` class is available from the `globalThis` global scope variable.\n": "The `LswCircuiter` class is available from the `globalThis` global scope variable.\n",
  "variable": "variable",
  "Lsw Circuiter API » LswCircuiter class": "Lsw Circuiter API » LswCircuiter class",
  "AsyncCircuit class\n": "AsyncCircuit class\n",
  "reference": "reference",
  "lsw.framework.lsw-circuiter.start.ref ": "lsw.framework.lsw-circuiter.start.ref "
}